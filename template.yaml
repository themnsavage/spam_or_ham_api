AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  spam_or_ham

  Sample SAM Template for spam_or_ham

Resources:

  # API resource
  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      DefinitionBody:
              swagger: '2.0'
              info:
                title: My API
              paths: # paths that the api has
                /predictions:
                  post:
                    x-amazon-apigateway-integration:
                      httpMethod: POST
                      type: aws_proxy
                      uri: # connect to lambda function resource
                        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLambdaFunction.Arn}/invocations
                      responses: {}

  # lambda function resource for POST protocol
  PostLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      ImageUri: 146748406015.dkr.ecr.us-east-1.amazonaws.com/spam-or-ham:latest
      AutoPublishAlias: live
      Timeout: 300
      MemorySize: 3008
      Role: !GetAtt LambdaExecutionRole.Arn

  # permission that allows api to invoke POST protocol lambda function
  PostLambdaFunctionApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostLambdaFunction
      Principal: apigateway.amazonaws.com

  # CloudWatch Logs Managed Policy
  CloudWatchLogsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Managed Policy for CloudWatch Logs Access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*' # This gives access to all logs, consider narrowing the scope

  # IAM Role for Lambda with both Managed Policies attached
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'YourLambdaRoleName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - 'lambda.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudWatchLogsPolicy